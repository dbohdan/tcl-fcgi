###############################################################################
#
# Fcgi.tcl-1.0
# Makefile.in for Fcgi.tcl configure
#
# Copyright 1998 Tom Poindexter 

FCGI_VERSION = @FCGI_VERSION@
FCGI_LIBVER  = @FCGI_LIBVER@

SHELL = /bin/sh

###############################################################################
#
# set the following defines as needed: 

prefix       = @TCL_PREFIX@
exec_prefix  = @TCL_EXEC_PREFIX@

# alternative defs
#prefix      = @prefix@
#exec_prefix = @exec_prefix@

srcdir       = .
libdir       = $(exec_prefix)/lib
datadir      = $(prefix)/lib
exampledir   = $(datadir)/example
mandir       = $(prefix)/man
man1dir      = $(mandir)/man1
man3dir      = $(mandir)/man3
docdir       = $(datadir)/doc
SCRIPTDIR    = $(datadir)/Fcgi$(FCGI_LIBVER)

#------------------------------------------------------------------------------
# define where Fcgi.tcl should put binaries, libraries, and mapages
#

BIN_DIR      = $(exec_prefix)/bin
LIB_DIR      = $(exec_prefix)/lib
MAN_DIR      = $(prefix)/man
MANN_DIR     = $(MAN_DIR)/mann

#------------------------------------------------------------------------------
# define where Tcl include and libraries are located
# Fcgi.tcl assumes that Tcl, Tk (and possibly Extended Tcl) are installed
# in the same locations

TCL_INC_DIR  = @TCL_INC_DIR@
TCL_LIB_DIR  = @TCL_LIB_DIR@
TCL_SRC_DIR  = @TCL_SRC_DIR@/generic

#------------------------------------------------------------------------------
# define Tcl, Tk, TclX libraries and extra libs

TCL_VERSION   = @TCL_VERSION@

TCL_LIB_SPEC  = @TCL_LIB_SPEC@
TCL_LIBS      = @TCL_LIBS@

TCLX_LIB_SPEC = @TCLX_LIB_SPEC@
TCLX_LIBS     = @TCLX_LIBS@
TCLX_LIB_LOC  = @TCLX_LIB_LOC@
TCLX_LIB_SEP  = @TCLX_LIB_SEP@

# grab the versions from TclX, needed to find TclX appinit files
TCLX_FULL_VERSION = @TCLX_FULL_VERSION@

#------------------------------------------------------------------------------
# compiler and flags from tcl config, so don't change CC
# without some thought, otherwise you might break the shared flags.
 
CC                = @TCL_CC@
#CC                = purify -cache-dir=pure_cache -chain-length="13" cc 

OPT_FLAG          = -O
#OPT_FLAG          = -g

TCL_DEFS          = $(OPT_FLAG) @TCL_DEFS@   @DEFS@
TCL_LD_FLAGS      = @TCL_LD_FLAGS@
TCL_SHLIB_SUFFIX  = @TCL_SHLIB_SUFFIX@
TCL_SHLIB_CFLAGS  = @TCL_SHLIB_CFLAGS@
TCL_SHLIB_LD      = @TCL_SHLIB_LD@
TCL_SHLIB_LD_LIBS = @TCL_SHLIB_LD_LIBS@

#------------------------------------------------------------------------------
# define names for Fcgi.tcl tclsh/tcl executable

TCL_EXEC   = tclsh
TCLX_EXEC  = tcl

#------------------------------------------------------------------------------
# define location for fcgi-devel-kit

FCGI        = @FCGI@

# location for a good tcl interpreter
FCGI_TCL_EXECUTABLE = @FCGI_TCL_EXECUTABLE@

#------------------------------------------------------------------------------
# define names for Fcgi.tcl library files, static and shared

LIB_FCGI    = libFcgi$(FCGI_LIBVER).a
LNK_FCGI    = -L. -lFcgi$(FCGI_LIBVER)
LIB_SH_FCGI = libFcgi$(FCGI_LIBVER)$(TCL_SHLIB_SUFFIX)


#------------------------------------------------------------------------------
# object files

FCGI_OBJ =  	c-src/tclFcgiCmd.o	\
		c-src/fcgiapp.o		\
		c-src/os_unix.o		

FCGI_SH_OBJ =	c-src/shared/tclFcgiCmd.o	\
		c-src/shared/fcgiapp.o		\
		c-src/shared/os_unix.o		

#------------------------------------------------------------------------------
# OTHER_LD_SEARCH_FLAGS so that dynamic loader will look for Oracle libraries
# NOTE: these are hacked from TCL_LD_SEARCH_FLAGS, and may need tweaking
# for a particular platform.  LIB_INSTALL_DIR used in tcl7.5,
# LIB_RUNTIME_DIR used in tcl7.5p1+.  If your linker doesn't like a colon
# separated path, then you will have to figure out what works, or 
# possible leave off the second lib. The inclusion of the Tcl lib dir is
# for the occasion you are building a static lib, but a shared Tcl lib is
# found during linking.

LIB_INSTALL_DIR        = @SEARCH_DIRS@
LIB_RUNTIME_DIR        = @SEARCH_DIRS@
OTHER_LD_SEARCH_FLAGS  = @OTHER_LD_SEARCH_FLAGS@

# Include tcl's cc flags for dynamic lib search path.  This is in case you
# are builing a static binary for Fcgi.tcl, but have both static and dynamic
# tcl libraries, of which the loader will probably prefer the dynamic verisons.
# Without this flag, the resulting binary won't have lib search information.
# Note that TCL_LD_SEARCH_FLAGS only works when LIB_RUNTIME_DIR has been set
# as above.
 
TCL_LD_SEARCH_FLAGS    = @TCL_LD_SEARCH_FLAGS@
 

#------------------------------------------------------------------------------
# define man page 

MAN_PAGE = fcgi.tcl.n


#------------------------------------------------------------------------------
# define ranlib command for systems that need it; touch otherwise

RANLIB = @RANLIB@

#------------------------------------------------------------------------------
# how to install

INSTALL         = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA    = @INSTALL_DATA@


#
# end of defines
#
###############################################################################


T_EXEC = @T_EXEC@

all:
	@echo "you must specify a flavor of Fcgi to build"
	@echo "choices are:"
	@echo ""
	@echo "  make tcl-src"
	@echo "  (makes the 100% Tcl flavor of Fcgi)"
	@echo ""
	@echo "  make c-src"
	@echo "  (makes the C extension flavor of Fcgi)"


c-src:	@PROGS@  

tcl-src: tcl-src/fcgi.tcl tcl-src/pkgIndex.tcl examples


examples: 
	cd example; $(SHELL) ./configure --prefix=$(prefix) --exec-prefix=$(exec_prefix) --with-fcgi_tcl_executable=$(FCGI_TCL_EXECUTABLE)
 
 
tcl-src/fcgi.tcl: tcl-src/fcgi.tcl.in
	@echo "Rebuilding fcgi.tcl..."
	$(SHELL) ./config.status
 
tcl-src/pkgIndex.tcl: tcl-src/pkgIndex.tcl.in
	@echo "Rebuilding pkgIndex.tcl..."
	$(SHELL) ./config.status
 

#------------------------------------------------------------------------------
# how to build objects for Fcgi.tcl and libFcgi

C_OBJ = $(CC) -c -I$(TCL_INC_DIR) -I$(FCGI)/include $(TCL_DEFS)

c-src/tclFcgiCmd.o:	c-src/tclFcgiCmd.c
	(cd c-src; $(C_OBJ) tclFcgiCmd.c )

c-src/fcgiapp.o:	$(FCGI)/libfcgi/fcgiapp.c
	(cd c-src; $(C_OBJ) $(FCGI)/libfcgi/fcgiapp.c )

c-src/os_unix.o:	$(FCGI)/libfcgi/os_unix.c
	(cd c-src; $(C_OBJ) $(FCGI)/libfcgi/os_unix.c )


C_SHOBJ = $(CC) $(TCL_SHLIB_CFLAGS) -c -I$(TCL_INC_DIR) -I$(FCGI)/include \
	   $(TCL_DEFS)

c-src/shared/tclFcgiCmd.o:  c-src/tclFcgiCmd.c
	(cd c-src/shared; $(C_SHOBJ) ../tclFcgiCmd.c )

c-src/shared/fcgiapp.o:  $(FCGI)/libfcgi/fcgiapp.c
	(cd c-src/shared; $(C_SHOBJ) $(FCGI)/libfcgi/fcgiapp.c )

c-src/shared/os_unix.o:  $(FCGI)/libfcgi/os_unix.c
	(cd c-src/shared; $(C_SHOBJ) $(FCGI)/libfcgi/os_unix.c )



#------------------------------------------------------------------------------
# how to build objects for shared library


$(LIB_FCGI):  $(FCGI_OBJ)
	-@rm $(LIB_FCGI)
	ar cr $(LIB_FCGI) $(FCGI_OBJ)
	$(RANLIB) $(LIB_FCGI)

$(LIB_SH_FCGI):  $(FCGI_SH_OBJ)
	$(TCL_SHLIB_LD)  $(OTHER_LD_SEARCH_FLAGS) \
	      -o $(LIB_SH_FCGI) $(FCGI_SH_OBJ) \
	      $(TCL_LIB_SPEC) $(TCL_LIBS) 

#------------------------------------------------------------------------------
# how to build objects for standard tcl

TCL_APPINIT   = $(TCL_LIB_DIR)/tcl$(TCL_VERSION)/tclAppInit.c

tclAppInit.c:   $(TCL_APPINIT)
	sed -f c-src/fcgiinit.sed <$(TCL_APPINIT) >tclAppInit.c

tclAppInit.o:   tclAppInit.c
	$(CC) -c -I$(TCL_INC_DIR) $(TCL_DEFS) tclAppInit.c


#------------------------------------------------------------------------------
# how to build objects for neosoft extended tcl

TCLX_APPINIT  = $(prefix)/$(TCLX_LIB_LOC)tclX$(TCLX_LIB_SEP)$(TCLX_FULL_VERSION)/tclXAppInit.c

tclXAppInit.c:	$(TCLX_APPINIT)
	sed -f c-src/fcgiinit.sed <$(TCLX_APPINIT) >tclXAppInit.c

tclXAppInit.o:	tclXAppInit.c
	$(CC)  -c -I$(TCL_INC_DIR) $(TCL_DEFS)  tclXAppInit.c


#------------------------------------------------------------------------------
# how to build executables and man page

$(TCL_EXEC):   $(LIB_FCGI) tclAppInit.o
	$(CC) tclAppInit.o    $(TCL_LD_FLAGS) $(TCL_LD_SEARCH_FLAGS) \
	       -L. $(LNK_FCGI) \
	       $(TCL_LIB_SPEC) $(TCL_LIBS) \
	       -o $(TCL_EXEC)

$(TCLX_EXEC):  $(LIB_FCGI) tclXAppInit.o 
	$(CC) tclXAppInit.o   $(TCL_LD_FLAGS) $(TCL_LD_SEARCH_FLAGS) \
	       -L. $(LNK_FCGI) \
	       $(TCLX_LIB_SPEC) \
               $(TCL_LIB_SPEC) $(TCLX_LIBS) $(TCL_LIBS) \
	       -o $(TCLX_EXEC)

$(MAN_PAGE):	doc/fcgi.tcl.man
	cp doc/fcgi.tcl.man $(MAN_PAGE)



#------------------------------------------------------------------------------
# install targets


install:
	@echo "you must specify a flavor of Fcgi to install"
	@echo "choices are:"
	@echo ""
	@echo "  make install-tcl-src"
	@echo "  (makes the 100% Tcl flavor of Fcgi)"
	@echo ""
	@echo "  make install-c-src"
	@echo "  (makes the C extension flavor of Fcgi)"

install-c-src:	c-src  @INSTALL_TARGET@  install-man  examples

install-tcl-src: tcl-src  install-man  examples
	$(srcdir)/mkinstalldirs $(SCRIPTDIR) $(man3dir)
	$(INSTALL_DATA) tcl-src/fcgi.tcl $(SCRIPTDIR)
	$(INSTALL_DATA) tcl-src/pkgIndex.tcl $(SCRIPTDIR)


install-shared:	$(LIB_SH_FCGI)   
	@echo installing $(LIB_SH_FCGI)
	$(INSTALL_PROGRAM) $(LIB_SH_FCGI)  $(LIB_DIR)/$(LIB_SH_FCGI)
	@echo installing pkgIndex.tcl
	-mkdir $(LIB_DIR)/Fcgi$(FCGI_LIBVER)
	$(INSTALL_PROGRAM) c-src/pkgIndex.tcl  $(LIB_DIR)/Fcgi$(FCGI_LIBVER)/pkgIndex.tcl

install-static:	@PROGS@   $(LIB_FCGI)
	@for f in $(T_EXEC) ; do  \
	  if test -x $$f ; then  \
	    echo installing $$f; \
	    $(INSTALL_PROGRAM) $$f  $(BIN_DIR)/$$f ; \
	  fi ; \
	  done
	@echo installing $(LIB_FCGI)
	$(INSTALL_DATA)    $(LIB_FCGI) $(LIB_DIR)/$(LIB_FCGI)

install-man:	$(MAN_PAGE)
	@echo installing $(MAN_PAGE)
	$(INSTALL_DATA)    $(MAN_PAGE)  $(MANN_DIR)/$(MAN_PAGE)

clean:
	rm -f $(T_EXEC) $(MAN_PAGE) \
	      $(LIB_FCGI) $(LIB_SH_FCGI)  \
	      tclXAppInit.c tkXAppInit.c tclXAppInit.o tkXAppInit.o     \
	      tclAppInit.c  tkAppInit.c  tclAppInit.o  tkAppInit.o      \
	      *.o c-src/*.o c-src/shared/*.o \
	      config.cache config.log

###############################################################################
# end of Makefile
###############################################################################
