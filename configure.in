# Process this file with autoconf to produce a configure script.

AC_INIT(Makefile.in)

FCGI_MAJOR_VERSION=0
FCGI_MINOR_VERSION=4
FCGI_MICRO_VERSION=0
FCGI_VERSION=$FCGI_MAJOR_VERSION.$FCGI_MINOR_VERSION
FCGI_VERSION_FULL=$FCGI_VERSION.$FCGI_MICRO_VERSION

FCGI_LIBVER=${FCGI_MAJOR_VERSION}${FCGI_MINOR_VERSION}

AC_PROG_INSTALL
AC_PROG_RANLIB

warn=''

if test -z "$prefix" -o "$prefix" = "NONE" ; then
    prefix=/usr/local
fi
 
if test -z "$exec_prefix" -o "$exec_prefix" = "NONE" ; then
    exec_prefix=$prefix
fi

prefix_locations="$prefix /usr/local /usr .."
exec_prefix_locations="$exec_prefix /usr/local /usr .."
 
# If `configure' is invoked (in)directly via `make', ensure that it
# encounters no `make' conflicts.
#
unset MFLAGS MAKEFLAGS

#----------------------------------------------------------------------------
#       Check where Tcl/Tk and maybe TclX is installed
#       based on prefix and exec_prefix value
#----------------------------------------------------------------------------
 
# find include/tcl.h
for f in $prefix_locations ; do
  if test -r "$f/include/tcl.h"; then
    TCL_INC_DIR=$f/include
    AC_MSG_RESULT(setting TCL_INC_DIR to $TCL_INC_DIR)
    break
  fi
done

# find lib/tclConfig.sh
for f in $exec_prefix_locations ; do
  if test -r "$f/lib/tclConfig.sh"; then
    TCL_LIB_DIR=$f/lib
    AC_MSG_RESULT(setting TCL_LIB_DIR to $TCL_LIB_DIR)
    break
  fi
done
 
if test -z "$TCL_INC_DIR" ; then
  AC_ERROR(could not find include/tcl.h in $prefix_locations)
fi
if test -z "$TCL_LIB_DIR" ; then
  AC_ERROR(could not find lib/tclConfig.sh in $exec_prefix_locations)
fi

SEARCH_DIRS="$TCL_LIB_DIR"
 
#----------------------------------------------------------------------------
#       Source the tcl config shells
#----------------------------------------------------------------------------
 
for f in tclConfig.sh ; do
  if test -r "$TCL_LIB_DIR/$f" ; then
    . $TCL_LIB_DIR/$f
    AC_MSG_RESULT(using $TCL_LIB_DIR/$f)
  fi
done
 
if test -z "$TCL_VERSION" ; then
  AC_ERROR(could not find tclConfig.sh in $TCL_LIB_DIR)
else
  AC_MSG_RESULT(tclConfig.sh has TCL_VERSION = $TCL_VERSION)
fi
 

#----------------------------------------------------------------------------
#       Find a good tcl executable (first look for tclX's 'tcl', then tclsh
#----------------------------------------------------------------------------

for f in $exec_prefix_locations ; do
  if test -x "$f/bin/tcl" ; then
    FCGI_TCL_EXECUTABLE="$f/bin/tcl"
    break
  fi
  if test -x "$f/bin/tclsh$TCL_VERSION" ; then
    FCGI_TCL_EXECUTABLE="$f/bin/tclsh$TCL_VERSION"
    break
  fi
  if test -x "$f/bin/tclsh" ; then
    FCGI_TCL_EXECUTABLE="$f/bin/tclsh"
    break
  fi
done
 
if test -z "$FCGI_TCL_EXECUTABLE" ; then
  AC_ERROR(could not find tcl, tclsh$TCL_VERSION, or  tclsh executable in $exec_prefix_locations)
else
  AC_MSG_RESULT(using FCGI_TCL_EXECUTABLE = $FCGI_TCL_EXECUTABLE)
fi

 
#----------------------------------------------------------------------------
#       Set defaults for optional package tclx
#       These may get turned off if --enable-shared is requested
#----------------------------------------------------------------------------
 
tclx=no
AC_ARG_WITH(tclx, [  --with-tclx               build with TclX (default --without-tclx)], tclx=$withval,tclx=no)
 
#----------------------------------------------------------------------------
#       Check where fcgi-devel-kit is installed on this system. Honour options:
#               --with-fcgi-directory=path
#----------------------------------------------------------------------------
 
fcgi_directory=''
AC_ARG_WITH(fcgi-directory, [  --with-fcgi-directory=DIR  fcgi-devel-kit home directory], fcgi_directory=$withval)
 
 
fcgi_locations="$fcgi_directory ../fcgi-devel-kit ../../fcgi-devel-kit ../../../fcgi-devel-kit"
 
for f in $fcgi_locations ; do
    if test -r "$f/include/fcgiapp.h" ; then
	curcd=`pwd`
	cd "$f"
        FCGI=`pwd`
	cd $curcd
        AC_MSG_RESULT(setting FCGI to $FCGI)
        break
    fi
done
 
#drastic search for fcgi-devel-kit
#if test -z "$FCGI" ; then
#  for d in '../*/*' '../../*' '../../*/*'  '../../../*' '../../../*/*' ; do
#  AC_MSG_RESULT(standby: looking in extreme places for fcgi-devel-kit)
#      fcgi_locations2="`ls $d/fcgi-devel-kit 2>/dev/null`"
#      if test -r "$f/include/fcgiapp.h" ; then
#	  curcd=`pwd`
#	  cd "$f"
#          FCGI=`pwd`
#	  cd $curcd
#          AC_MSG_RESULT(setting FCGI to $FCGI)
#          break
#      fi
#  done
#fi
 
if test -z "$FCGI" ; then
    AC_MSG_RESULT(Warning: Could not find the fcgi home header/library files.)
    AC_MSG_RESULT(fcgi-devel-kit home directory not found in $fcgi_locations $fcgi_locations2)
    AC_MSG_RESULT(You can define the path to your directory with)
    AC_MSG_RESULT(your fcgi distribution: --with-fcgi-directory=<path>)
    warn='yes'
fi
 

 
#----------------------------------------------------------------------------
#       Check whether shared library should be built
#----------------------------------------------------------------------------
 
FCGI_SH_LIB=""
shared=yes
AC_ARG_ENABLE(shared, [  --disable-shared             build static lib & exe (default --enable-shared)], [shared=$enableval], [shared=yes])
 
if test "$shared" = "yes" -a "${TCL_SHLIB_SUFFIX}" != ""; then
    RANLIB=':'
    AC_MSG_RESULT(will build shared library)
else
  if test "$shared" = "yes" ; then
    AC_MSG_RESULT(--enable-shared requested but Tcl is not configure for dynamic loading.)
    AC_MSG_RESULT(Warning: Building a dynamic shared library for fcgi is not possible.)
    warn='yes'
    AC_MSG_RESULT(reconfigure fcgi with --disable-shared or)
    AC_MSG_RESULT(reconfigure Tcl with --enable-shared.)
    AC_MSG_RESULT(halted.)
  else
    AC_MSG_RESULT(will build static library and executables)
  fi
fi
 
if test "$shared" = "yes" ; then
  PROGS='$(LIB_SH_FCGI)'
  INSTALL_TARGET=install-shared
  tclx=no
else
  INSTALL_TARGET=install-static
fi
 
 
 
#----------------------------------------------------------------------------
#       Check if tclx is installed on this system. Honour the options:
#               --with-tclx=yes|no  --without-tclx  (default to yes)
#----------------------------------------------------------------------------
 
TCLX_LIB_SPEC=''
TCLX_LIBS=''
TCLX_FULL_VERSION=''
TCLX_LIB_LOC=""
TCLX_LIB_SEP="/"

if test "$tclx" = "yes" ; then
  for f in tclxConfig.sh ; do
    if test -r "$TCL_LIB_DIR/$f" ; then
      . $TCL_LIB_DIR/$f
    fi
  done
 
  if test -z "$TCLX_FULL_VERSION" ; then
    AC_MSG_RESULT(Warning: could not find tclxConfig.sh in $TCL_LIB_DIR)
    warn='yes'
  else
    AC_MSG_RESULT(tclxConfig.sh has TCLX_FULL_VERSION = $TCLX_FULL_VERSION)
 
    # check if TCLX_LIB_SPEC defined in tclxConfig.sh; if not, build our own
    if test "$TCLX_LIB_SPEC" = "" ; then
      TCLX_LIB_SPEC='-ltclx'
    fi
  fi
 
  # tclx installs its appinit.c in lib/ tree for tclx7.6.0b2+
  if test -r "$TCL_PREFIX/lib/tclX$TCLX_FULL_VERSION/tclXAppInit.c" ; then
    TCLX_LIB_LOC="lib/"
    TCLX_LIB_SEP=""
  else
    # tclx7.6.0b1 slightly different
    if test -r "$TCL_PREFIX/lib/tclX/$TCLX_FULL_VERSION/tclXAppInit.c" ; then
      TCLX_LIB_LOC="lib/"
      TCLX_LIB_SEP="/"
    fi
    #else it must be tclx7.5.2-, defaults should work
  fi
 
  T_EXEC='$(TCLX_EXEC)'
 
else
 
  # no tclx, set defines for standard tcl
 
  T_EXEC='$(TCL_EXEC)'
fi

# change PROGS target if not building shared lib
if test "$shared" != "yes" ; then
  PROGS="${T_EXEC}"
fi
 
 
#--------------------------------------------------------------------
#       sigh. TCL_LD_SEARCH_FLAGS is built for cc, we need one built for
#       ld.  try to coerce '-Wl,<flag>,<parm>' into just '<flag> <parm>'
#       other flags are left as is.
#--------------------------------------------------------------------
 
OTHER_LD_SEARCH_FLAGS=''
SPACE=''
for arg in $TCL_LD_SEARCH_FLAGS
do
  newarg=''
  case $arg in
    -Wl*)
      IFS_SAVE=$IFS
      IFS=,
      for p in $arg
      do
        case $p in
          -Wl)
            ;;
          *)
            newarg="$newarg $p"
            ;;
        esac
      done
      IFS=$IFS_SAVE
      ;;
    *)
      newarg=$arg
      ;;
  esac
  OTHER_LD_SEARCH_FLAGS="${OTHER_LD_SEARCH_FLAGS}${SPACE}${newarg}"
  SPACE=' '
done
 

if test "$warn" = "yes" ; then
  AC_MSG_RESULT(Note: you may safely ignore warnings if you plan to install the Tcl flavor)
fi

#--------------------------------------------------------------------
#       Substitute all variables for Makefile
#--------------------------------------------------------------------
 
# fix TCL_LIB_DIR to platform independent lib dir
TCL_LIB_DIR=$TCL_PREFIX/lib
 
AC_SUBST(T_EXEC)
AC_SUBST(PROGS)
AC_SUBST(INSTALL_TARGET)
AC_SUBST(FCGI)
AC_SUBST(FCGI_MAJOR_VERSION)
AC_SUBST(FCGI_MINOR_VERSION)
AC_SUBST(FCGI_MICRO_VERSION)
AC_SUBST(FCGI_VERSION_FULL)
AC_SUBST(FCGI_VERSION)
AC_SUBST(FCGI_LIB_FILE)
AC_SUBST(FCGI_LIB_FILES)
AC_SUBST(FCGI_TCL_EXECUTABLE)
AC_SUBST(FCGI_LIBVER)
AC_SUBST(TCL_VERSION)
AC_SUBST(TCL_PREFIX)
AC_SUBST(TCL_EXEC_PREFIX)
AC_SUBST(TCL_INC_DIR)
AC_SUBST(TCL_LIB_DIR)
AC_SUBST(TCL_SRC_DIR)
AC_SUBST(TCL_LIB_SPEC)
AC_SUBST(TCL_LIBS)
AC_SUBST(TCLX_LIB_SPEC)
AC_SUBST(TCLX_LIBS)
AC_SUBST(TCLX_LIB_LOC)
AC_SUBST(TCLX_LIB_SEP)
AC_SUBST(TCLX_FULL_VERSION)
AC_SUBST(TCL_CC)
AC_SUBST(TCL_DEFS)
AC_SUBST(TCL_LD_FLAGS)
AC_SUBST(TCL_LD_SEARCH_FLAGS)
AC_SUBST(TCL_SHLIB_SUFFIX)
AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LD_LIBS)
AC_SUBST(SEARCH_DIRS)
AC_SUBST(OTHER_LD_SEARCH_FLAGS)
 
AC_OUTPUT(Makefile tcl-src/fcgi.tcl tcl-src/pkgIndex.tcl c-src/tclFcgiCmd.c c-src/pkgIndex.tcl c-src/driver.tcl)

