#! /usr/bin/env tclsh

package require fileutil
package require http
package require tcltest
package require try


proc main {} {
    cd [file dirname [info script]]/..

    lappend ::env(TCLLIBPATH) [pwd]/tcl-src

    set port1k [expr { int(1000 * rand()) }]
    set ::config [dict create \
        fastcgiPort [expr { 9000 + $port1k }] \
        httpPort [expr { 8000 + $port1k }] \
        nginxConfig [pwd]/tests/nginx.conf \
        tempDir [temp-dir fcgi-nginx-test] \
        wait 500 \
    ]

    file mkdir [config tempDir]/proxy/cache

    set tclsh         [info nameofexecutable]


    tcltest::test echo-cgi-1.1 {} -body {
        with-nginx {
            set pid \
                [run $tclsh example/echo-cgi.tcl -port [config fastcgiPort] &]
            wait

            try {
                set token [http::geturl [url]]
                set html [http::data $token]
                http::cleanup $token

                set html
            } finally {
                kill $pid
            }
        }
    } -match glob -result {*<title>fcgi.tcl: echo-cgi*}

    tcltest::test echo-tcl-1.1 {} -body {
        with-nginx {
            set pid \
                [run $tclsh example/echo-tcl.tcl -port [config fastcgiPort] &]
            wait

            try {
                set token [http::geturl [url]?hello=world]
                set html [http::data $token]
                http::cleanup $token

                set html
            } finally {
                kill $pid
            }
        }
    } -match glob -result {*<dt>QUERY_STRING</dt><dd>hello=world</dd>*}

    tcltest::test vclock-1.1 {} -body {
        with-nginx {
            set pid \
                [run $tclsh example/vclock.tcl -port [config fastcgiPort] &]
            wait

            try {
                set query [http::formatQuery type 12-hour]
                set token [http::geturl [url] -query $query]
                set html [http::data $token]
                http::cleanup $token

                set html
            } finally {
                kill $pid
            }
        }
    } -match regexp -result {value="12-hour"\s+checked}


    # Exit with a nonzero status if there are failed tests.
    set failed [expr {$tcltest::numTests(Failed) > 0}]

    tcltest::cleanupTests
    return $failed
}


proc temp-dir namePrefix {
    set dir [fileutil::tempfile $namePrefix]
    file delete $dir

    tcltest::makeDirectory $dir
    if {$::tcl_platform(platform) eq {unix}} {
        file attributes $dir -permissions 0700
    }

    return $dir
}


proc config key {
    dict get $::config $key
}


proc with-nginx body {
    dict incr ::config fastcgiPort
    dict incr ::config httpPort

    render-template [config nginxConfig].template [config nginxConfig] [list \
        %DIR%          [config tempDir] \
        %FASTCGI_PORT% [config fastcgiPort] \
        %HTTP_PORT%    [config httpPort] \
    ]

    set nginxCmd [list nginx -c [config nginxConfig] -p [config tempDir]]
    run {*}$nginxCmd &

    try {
        uplevel 1 $body
    } finally {
        run {*}$nginxCmd -s stop
        wait
    }
}


proc render-template {src dest mapping} {
    set template [fileutil::cat $src]
    set template [string map $mapping $template]
    fileutil::writeFile $dest $template
}


proc run args {
    exec >@ stdout 2>@ stderr {*}$args
}


proc wait {} {
    after [config wait]
}


proc url {} {
    return http://localhost:[config httpPort]
}


proc kill pid {
    set prefix [expr {
        $::tcl_platform(platform) eq {windows}
        ? {taskkill /pid}
        : {kill}
    }]

    run {*}$prefix $pid
}


exit [main]
